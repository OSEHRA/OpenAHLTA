'***************************************************************************************
'
'  Copyright (c) 2007-2012 Northrop Grumman Corporation
'
'  Licensed by Tricare Management Activity under license from the Copyright owner.
'
'  This text file must be included in all Derivative Works of the licensed Source Code.
'
'***************************************************************************************

VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsSurfaceSet"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Ext_KEY = "SavedWithClassBuilder6" ,"Yes"
Attribute VB_Ext_KEY = "Member0" ,"SurfaceSet"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'local variable(s) to hold property value(s)
Private mvarSurfaceSetID As Long
Private mvarState As Long
Private mvarSurfaceSet As String
Private mvarColorID As Long
Private mvarHatchID As Long
Private mvarSymbolID As Long
Private mvarSurfaceAbbr As String
Private mvarDentalEncounterTeethID As Long
Private mvarTeeth As colTeeth
Private mvarDirtyFlag As DirtyFlagEnum
Private mvarDeleted As Boolean
Private mvarSubMenuID As Long
Private mvarSSChangedInEncounter As Boolean
Private mvarIsToothLoc As Boolean

Public Property Get IsToothLoc() As Boolean
    
    IsToothLoc = mvarIsToothLoc
    
End Property


Friend Property Let SSChangedInEncounter(vData As Boolean)

    mvarSSChangedInEncounter = vData

End Property

Friend Property Get SSChangedInEncounter() As Boolean
    
    SSChangedInEncounter = mvarSSChangedInEncounter
    
End Property

Public Property Let SubMenuID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.SubMenuID = 5
    mvarSubMenuID = vData
End Property


Public Property Get SubMenuID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.SubMenuID
    SubMenuID = mvarSubMenuID
End Property








Public Property Let Deleted(ByVal vData As Boolean)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.Deleted = 5
    mvarDeleted = vData
End Property


Public Property Get Deleted() As Boolean
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.Deleted
    Deleted = mvarDeleted
End Property




Friend Function SaveSurfaceSet(DxCodeID As Long, TxCodeID As Long) As Boolean

'This function saves the surface set to the DENTAL_ENC_SURFACE_SET table.

Dim sSQL As String
Dim rs As Recordset

On Error GoTo SaveSurfaceSetErr

    SaveSurfaceSet = False
    
    Select Case mvarDirtyFlag
    
        Case DirtyFlagEnum.dfNoAction
            'No changes have been made since the last save, so do nothing.
    
        Case DirtyFlagEnum.dfUpdate
            'Update the database.
            sSQL = "Update DENTAL_ENC_SURFACE_SET" _
                & " SET SURFACESET = '" & mvarSurfaceSet & "'," _
                & " DENTAL_ENCOUNTER_TEETH_ID = " & mvarDentalEncounterTeethID & "," _
                & " COLOR_ID = " & mvarColorID & "," _
                & " STATE = " & mvarState & "," _
                & " HATCH_ID = " & mvarHatchID & "," _
                & " SYMBOL_ID = " & mvarSymbolID & "," _
                & " SUB_MENU_ID = " & mvarSubMenuID & "," _
                & " SURFACEABBR = '" & mvarSurfaceAbbr & "'" _
                & " Where (SURFACE_SET_ID = " & mvarSurfaceSetID & ")"
            goconn.ExecuteSQL sSQL
            
            If Not mvarTeeth Is Nothing Then
                'Note: Only one tooth will be under here.
                mvarTeeth.SaveTeeth mvarDentalEncounterTeethID
            End If
            
        Case DirtyFlagEnum.dfAdd
            'Add the data to the database.
            
            'This is wierd because we need to save the Tooth to get the DentalEncounterTeethID
            'before we can save the surface set, because the surfaceset has a foreign key
            'of DentalEncounterTeethID
            If Not mvarTeeth Is Nothing Then
                'This function returns the DentalEncounterTeethID that was generated by the
                'sequence when the Tooth was saved.
                'Note: Only one tooth will be under here.
                mvarTeeth.SaveTeeth mvarDentalEncounterTeethID
            Else
                'We cannot add the surfaceset because the Tooth has not been assigned
                Exit Function
            End If
            
            If gbUseStoredProc = True Then
                
                'In CDR mode so use the SP
                Dim oCmd As CHCSII_Command.CHCSII_Cmd
                Dim oParam As CHCSII_Command.CHCSII_SPparam
                
                Set oCmd = New CHCSII_Command.CHCSII_Cmd
                oCmd.SPName = "DL_NOTE_SS_INSERT"
                
                'Call oCmd.AddParam(False, False, "textString", mvarSurfaceSetID)
                Call oCmd.AddParam(False, False, "textString", DxCodeID)
                Call oCmd.AddParam(False, False, "textString", TxCodeID)
                Call oCmd.AddParam(False, False, "textString", mvarSurfaceSet)
                Call oCmd.AddParam(False, False, "textString", mvarDentalEncounterTeethID)
                Call oCmd.AddParam(False, False, "textString", mvarColorID)
                Call oCmd.AddParam(False, False, "textString", mvarState)
                Call oCmd.AddParam(False, False, "textString", mvarHatchID)
                Call oCmd.AddParam(False, False, "textString", mvarSymbolID)
                Call oCmd.AddParam(False, False, "textString", mvarSubMenuID)
                Call oCmd.AddParam(False, False, "textString", mvarSurfaceAbbr)
                Call oCmd.AddParam(True, True, "", "")
                Set rs = goconn.OpenRecordsetSP(oCmd)
                
                If Not rs.EOF Then
                    mvarSurfaceSetID = rs("ID")
                Else
                    MsgBxARMd "Fatal Error: could not get the sequence from the SP."
                    Exit Function
                End If

            Else
            
                'Get the sequence for the surfaceset id
'                sSQL = "Select DENTAL_ENC_SURFACE_SET_SEQ.NEXTVAL as PKID from DUAL"
'                Set rs = goconn.OpenRecordset(sSQL)
'                If rs.EOF Then
'                    'Could not get the sequence from the db
'                    SaveSurfaceSet = False
'                    Exit Function
'                End If
'                mvarSurfaceSetID = rs("PKID")
'                rs.Close
'                Set rs = Nothing
                mvarSurfaceSetID = goconn.GetNextID(esDENTAL_ENC_SURFACE_SET_SEQ)
                
                'Add the info to the database
                sSQL = "INSERT INTO DENTAL_ENC_SURFACE_SET" _
                    & " (SURFACE_SET_ID," _
                    & " SURFACESET," _
                    & " DENTAL_ENCOUNTER_TEETH_ID," _
                    & " COLOR_ID," _
                    & " STATE," _
                    & " HATCH_ID," _
                    & " SYMBOL_ID," _
                    & " SUB_MENU_ID," _
                    & "SURFACEABBR" _
                    & ")VALUES (" _
                    & " " & mvarSurfaceSetID & "," _
                    & " '" & mvarSurfaceSet & "'," _
                    & " " & mvarDentalEncounterTeethID & " ," _
                    & " " & mvarColorID & "," _
                    & " " & mvarState & "," _
                    & " " & mvarHatchID & "," _
                    & " " & mvarSymbolID & "," _
                    & " " & mvarSubMenuID & "," _
                    & " '" & mvarSurfaceAbbr & "')"
                goconn.ExecuteSQL sSQL
            
                If DxCodeID <> 0 Then
                    'Add the relationship
                    sSQL = "INSERT INTO DENTAL_ENCOUNTER_DXS_SS" _
                        & " (DX_CODE_ID, SURFACE_SET_ID)" _
                        & " VALUES (" & DxCodeID & ", " & mvarSurfaceSetID & ")"
                ElseIf TxCodeID <> 0 Then
                     'Add the relationship
                    sSQL = "INSERT INTO DENTAL_ENCOUNTER_TXS_SS" _
                        & " (TX_CODE_ID, SURFACE_SET_ID)" _
                        & " VALUES (" & TxCodeID & ", " & mvarSurfaceSetID & ")"
                End If
                
                goconn.ExecuteSQL sSQL
            End If
            
            
    End Select
    
'    'This must be here because if two references are made to it, it only needs to save the
'    'SurfaceSet once, but it must add the relationships in both (or more) cases.
'    'Add the SurfaceSet to the DxCodeID. Only applicable if this Surfaceset
'    'is in a collection that is under a Dx.
'    If DxCodeID <> 0 Then
'        'Find out if the relationship exists
'        sSQL = "SELECT DX_CODE_ID, SURFACE_SET_ID" _
'            & " From DENTAL_ENCOUNTER_DXS_SS" _
'            & " WHERE (DX_CODE_ID = " & DxCodeID & ") AND (SURFACE_SET_ID = " & mvarSurfaceSetID & ")"
'
'        Set rs = goconn.OpenRecordset(sSQL)
'        If rs.EOF Then
'        End If
'        rs.Close
'    End If
'
'    'This must be here because if two references are made to it, it only needs to save the
'    'SurfaceSet once, but it must add the relationships in both (or more) cases.
'    'Add the SurfaceSet to the TxCodeID. Only applicable if this Surfaceset
'    'is in a collection that is under a Tx.
'    If TxCodeID <> 0 Then
'        'Find out if the relationship exists
'        sSQL = "SELECT TX_CODE_ID, SURFACE_SET_ID" _
'            & " From DENTAL_ENCOUNTER_TXS_SS" _
'            & " WHERE (TX_CODE_ID = " & TxCodeID & ") AND (SURFACE_SET_ID = " & mvarSurfaceSetID & ")"
'
'        Set rs = goconn.OpenRecordset(sSQL)
'
'        If rs.EOF Then
'            'Add the relationship
'            sSQL = "INSERT INTO DENTAL_ENCOUNTER_TXS_SS" _
'                & " (TX_CODE_ID, SURFACE_SET_ID)" _
'                & " VALUES (" & TxCodeID & ", " & mvarSurfaceSetID & ")"
'
'            goconn.ExecuteSQL sSQL
'        End If
'        rs.Close
'    End If
    
    mvarDirtyFlag = dfNoAction
    SaveSurfaceSet = True

Exit Function

SaveSurfaceSetErr:
    MsgBxARMd Err.Description & " -- " & sSQL, vbCritical, Err.Source
    
End Function

Private Sub SetDirtyFlag()
    
    'This is called when a user sets a property
    'If the current flag is dfAdd, then don't change it until SaveSurfaceSet is called
    'otherwise, set it to sfUpdate
    
    'SF 10-11-02
    If mvarDirtyFlag = dfNoAction Then
        mvarDirtyFlag = dfUpdate
    End If
    
    mvarSSChangedInEncounter = True
    
'    If mvarDirtyFlag = dfAdd Then
'        Exit Sub
'    Else
'        mvarDirtyFlag = dfUpdate
'    End If
    
End Sub











Public Property Let DirtyFlag(ByVal vData As DirtyFlagEnum)
'used when assigning an Object to the property, on the left side of a Set statement.
'Syntax: Set x.DirtyFlag = Form1
    mvarDirtyFlag = vData
End Property


Public Property Get DirtyFlag() As DirtyFlagEnum
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.DirtyFlag
    DirtyFlag = mvarDirtyFlag
End Property



Public Property Set Teeth(ByVal vData As colTeeth)

'Set to "private property" now because I don't think the user will need it.

'used when assigning an Object to the property, on the left side of a Set statement.
'Syntax: Set x.Tooth = Form1
    Set mvarTeeth = vData
End Property


Public Property Get Teeth() As colTeeth

'Set to "private property" now because I don't think the user will need it.

'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.Tooth
    If mvarTeeth Is Nothing Then
'        'Get the tooth that belongs to this surface set
        Set mvarTeeth = New colTeeth
'        mvarTeeth.RefreshTeeth mvarDentalEncounterTeethID
    End If
    
    Set Teeth = mvarTeeth
End Property



Public Property Let DentalEncounterTeethID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.DentalEncounterTeethID = 5
    mvarDentalEncounterTeethID = vData
    SetDirtyFlag
End Property


Public Property Get DentalEncounterTeethID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.DentalEncounterTeethID
    DentalEncounterTeethID = mvarDentalEncounterTeethID
End Property



Public Property Let SurfaceAbbr(ByVal vData As String)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.SurfaceAbbr = 5
    mvarSurfaceAbbr = Left(vData, 50)
    SetDirtyFlag
End Property


Public Property Get SurfaceAbbr() As String
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.SurfaceAbbr
    SurfaceAbbr = mvarSurfaceAbbr
End Property



Public Property Let SymbolID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.SymbolID = 5
    mvarSymbolID = vData
    SetDirtyFlag
End Property


Public Property Get SymbolID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.SymbolID
    SymbolID = mvarSymbolID
End Property



Public Property Let HatchID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.HatchID = 5
    mvarHatchID = vData
    SetDirtyFlag
End Property


Public Property Get HatchID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.HatchID
    HatchID = mvarHatchID
End Property



Public Property Let ColorID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.ColorID = 5
    mvarColorID = vData
    SetDirtyFlag
End Property


Public Property Get ColorID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.ColorID
    ColorID = mvarColorID
End Property



Public Property Let SurfaceSet(ByVal vData As String)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.SurfaceSet = 5
    mvarSurfaceSet = Left(vData, 255)
    SetDirtyFlag
End Property


Public Property Get SurfaceSet() As String
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.SurfaceSet
    SurfaceSet = mvarSurfaceSet
End Property



Public Property Let State(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.State = 5
    mvarState = vData
    SetDirtyFlag
End Property


Public Property Get State() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.State
    State = mvarState
End Property



Public Property Let SurfaceSetID(ByVal vData As Long)
'used when assigning a value to the property, on the left side of an assignment.
'Syntax: X.SurfaceSetID = 5
    mvarSurfaceSetID = vData
    SetDirtyFlag
End Property


Public Property Get SurfaceSetID() As Long
'used when retrieving value of a property, on the right side of an assignment.
'Syntax: Debug.Print X.SurfaceSetID
    SurfaceSetID = mvarSurfaceSetID
End Property



Private Sub Class_Initialize()

    'Set the defaults
    mvarDirtyFlag = dfNoAction
    
End Sub


Private Sub Class_Terminate()

    Set mvarTeeth = Nothing
    
End Sub


